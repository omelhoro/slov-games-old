// Generated by CoffeeScript 1.7.1
(function() {
  var $,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  $(function() {
    var $case_div, Case_Trainer, Session, session;
    Case_Trainer = (function() {
      function Case_Trainer() {
        var $row, i, id, k, nm, rand_num, td_case, v, val, w, word, _i, _ref;
        this.$table = $("#case_table");
        this.$help = $(".ui-icon-help");
        this.$count = $("#count");
        this.cases = (function() {
          var _results;
          _results = [];
          for (k in case_order) {
            v = case_order[k];
            _results.push(k);
          }
          return _results;
        })();
        this.$rows = [];
        this.nums = 3;
        for (id in case_order) {
          nm = case_order[id];
          $row = $("<tr class='case_rows " + id + "'></tr>");
          this.$rows.push($row);
          td_case = $("<td class='case' id='" + id + "'></td>").text(nm);
          $row.append(td_case);
          this.$table.append($row);
        }
        this.words = (function() {
          var _results;
          _results = [];
          for (k in par_db) {
            val = par_db[k];
            _results.push(val);
          }
          return _results;
        })();
        for (i = _i = _ref = this.words.length; _ref <= 0 ? _i < 0 : _i > 0; i = _ref <= 0 ? ++_i : --_i) {
          rand_num = Math.floor(Math.random() * i);
          word = this.words.splice(rand_num, 1)[0];
          this.words.push(word);
        }
        this.filtered = (function() {
          var _j, _len, _ref1, _results;
          _ref1 = this.words;
          _results = [];
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            w = _ref1[_j];
            _results.push(w);
          }
          return _results;
        }).call(this);
      }

      Case_Trainer.prototype._flatten = function(nested_list) {
        var ar, flat_array, _i, _len;
        flat_array = [];
        for (_i = 0, _len = nested_list.length; _i < _len; _i++) {
          ar = nested_list[_i];
          flat_array = flat_array.concat(ar);
        }
        return flat_array;
      };

      Case_Trainer.prototype._mean_word_length = function(ar) {
        var length, wrd, _i, _len;
        length = 0;
        for (_i = 0, _len = ar.length; _i < _len; _i++) {
          wrd = ar[_i];
          length += wrd.length;
        }
        return length / ar.length;
      };

      Case_Trainer.prototype._pick_random = function(start, end, how_many) {
        var el, i, n, random_array, random_num, temp, _i, _len;
        if (start == null) {
          start = 0;
        }
        if (how_many == null) {
          how_many = 1;
        }
        random_array = (function() {
          var _i, _results;
          _results = [];
          for (n = _i = start; start <= end ? _i < end : _i > end; n = start <= end ? ++_i : --_i) {
            _results.push(n);
          }
          return _results;
        })();
        console.log("rand_ar", random_array);
        for (i = _i = 0, _len = random_array.length; _i < _len; i = ++_i) {
          el = random_array[i];
          random_num = Math.floor(Math.random() * random_array.length);
          temp = random_array[i];
          random_array[i] = random_array[random_num];
          random_array[random_num] = temp;
        }
        return random_array.slice(0, how_many);
      };

      Case_Trainer.prototype.filter_data = function(gender, number, freq) {
        var check_gender, num_str, w;
        if (freq == null) {
          freq = 1;
        }
        check_gender = function(str) {
          var a, g;
          a = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = gender.length; _i < _len; _i++) {
              g = gender[_i];
              if (str.indexOf(g) !== -1) {
                _results.push(g);
              }
            }
            return _results;
          })();
          if (a.length > 0) {
            return true;
          }
        };
        num_str = "" + number;
        this.filtered = (function() {
          var _i, _len, _ref, _results;
          _ref = this.words;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            w = _ref[_i];
            if (check_gender(w[0]) && num_str.indexOf("" + (w[2].sort())) !== -1) {
              _results.push(w);
            }
          }
          return _results;
        }).call(this);
        return this.$count.text(this.filtered.length);
      };

      Case_Trainer.prototype.make_table = function(misses) {
        var $row, counter, end, flatten_ar, i, ideal_par, ii, mean_wrd, miss_randoms, start, stem, td, td_input, tdata, word_num, word_par, word_stem, _i, _ref, _results;
        this.$count.text(this.filtered.length - 1);
        $(".decl").remove();
        _ref = this.filtered.pop(), word_par = _ref[0], word_stem = _ref[1], word_num = _ref[2];
        this.$help.prop("title", word_par);
        console.log(word_stem);
        ideal_par = reg_db[word_par];
        flatten_ar = this._flatten(ideal_par);
        mean_wrd = this._mean_word_length(flatten_ar);
        switch (word_num.length) {
          case 1:
            start = word_num[0] * flatten_ar.length / this.nums;
            end = (word_num[0] + 1) * flatten_ar.length / this.nums;
            miss_randoms = this._pick_random(start, end, misses);
            break;
          case 3:
            miss_randoms = this._pick_random(0, flatten_ar.length, misses);
        }
        counter = 0;
        _results = [];
        for (i = _i = 0; _i < 3; i = ++_i) {
          _results.push((function() {
            var _j, _len, _ref1, _results1;
            _ref1 = ideal_par[i];
            _results1 = [];
            for (ii = _j = 0, _len = _ref1.length; _j < _len; ii = ++_j) {
              td = _ref1[ii];
              stem = word_stem.length > 1 ? word_stem[i][ii] : word_stem[0];
              if (__indexOf.call(word_num, i) >= 0) {
                if (__indexOf.call(miss_randoms, counter) >= 0) {
                  td_input = $("<input/>").data("sol", td).prop("size", 3);
                  tdata = $("<td class='decl'>" + stem + "-</td>").append(td_input);
                } else {
                  tdata = $("<td class='decl'>" + stem + "-" + td + "</td>");
                }
              } else {
                tdata = $("<td class='missing decl'>");
              }
              $row = this.$rows[ii];
              $row.append(tdata);
              _results1.push(counter++);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Case_Trainer.prototype.check_table = function() {
        var $inputs, right;
        right = true;
        $inputs = $("#case_table").find("input");
        return $inputs.each(function() {
          var $input, solution, user_input;
          console.log(this, $(this));
          $input = $(this);
          user_input = $(this).val();
          solution = $(this).data("sol");
          if (user_input !== solution) {
            right = false;
            return $input.css("backgroundColor", "#E83354");
          } else {
            return $input.css("backgroundColor", "#66FA66");
          }
        });
      };

      return Case_Trainer;

    })();
    Session = (function() {
      function Session() {
        this.case_trainer = new Case_Trainer();
        this._manager();
        this._filter();
        this.case_trainer.make_table();
      }

      Session.prototype._filter = function() {
        var $freq, $gender, $number;
        $gender = $("#gen_pars").children();
        $number = $("#num_pars").children();
        $freq = $("#freq_pars").prop("checked", "true");
        $(".parameters").change((function(_this) {
          return function() {
            var gender, number;
            gender = [];
            number = [];
            $gender.each(function(i, o) {
              o = $(o);
              if (o.is(":checked")) {
                return gender.push(o.val());
              }
            });
            $number.each(function(i, o) {
              o = $(o);
              if (o.is(":checked")) {
                return number.push(parseInt(o.val()));
              }
            });
            if (number.length === 2) {
              number.push(1);
            }
            _this.case_trainer.filter_data(gender.sort(), number.sort());
            return _this._enableNextBut();
          };
        })(this));
        $gender.click();
        return $number.click();
      };

      Session.prototype._enableNextBut = function() {
        if (this.case_trainer.filtered.length === 0) {
          return $("#generator").prop("disabled", true);
        } else {
          return $("#generator").prop("disabled", false);
        }
      };

      Session.prototype._manager = function() {
        $("#generator").click((function(_this) {
          return function() {
            var misses, n;
            misses = $("#num_miss").val();
            n = parseInt(misses);
            if (n || n === 0) {
              _this.case_trainer.make_table(misses);
              return _this._enableNextBut();
            } else {
              return alert("Not a valid number!");
            }
          };
        })(this));
        return $("#check").click((function(_this) {
          return function() {
            return _this.case_trainer.check_table();
          };
        })(this));
      };

      Session.prototype._slider = function() {
        return $("#freq_pars").slider({
          range: true,
          min: 0,
          max: 100,
          values: [0, 100]
        });
      };

      return Session;

    })();
    $case_div = $("#case_table");
    return session = new Session();
  });

}).call(this);

//# sourceMappingURL=case_trainer.map
