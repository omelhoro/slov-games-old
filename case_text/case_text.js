// Generated by CoffeeScript 1.7.1
(function() {
  var $;

  $ = jQuery;

  $(function() {
    var Case_Text, Session, session;
    Case_Text = (function() {
      function Case_Text() {
        var w;
        this.casus = $(".case");
        this.nouns = "";
        this.cases = (function() {
          var _i, _len, _ref, _results;
          _ref = this.casus;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            w = _ref[_i];
            _results.push($(w).prop("class").split(" ")[1]);
          }
          return _results;
        }).call(this);
        this.casus_selected = [$(this.casus[0]), 0];
        this.noun_selected = [$(this.nouns[0]), 0];
      }

      Case_Text.prototype.mark_noun = function() {
        var ca, cas, i, _i, _len, _ref;
        cas = this.casus_selected[0].attr('class').split(' ')[1];
        _ref = this.cases;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ca = _ref[_i];
          console.log(ca);
          i = [this.noun_selected[0].prop("class"), ca];
          this.noun_selected[0].removeClass(ca);
          i = this.noun_selected[0].prop("class");
        }
        this.noun_selected[0].addClass(cas);
        return this.noun_selected[0].data("user", cas);
      };

      Case_Text.prototype.move_cases = function(direction) {
        this.casus_selected[0].toggleClass("selected");
        if (direction === 83) {
          this.casus_selected[1] += 1;
        } else if (direction === 87) {
          this.casus_selected[1] -= 1;
        }
        if (this.casus_selected[1] === this.casus.length) {
          this.casus_selected[1] = 0;
        }
        if (this.casus_selected[1] === -1) {
          this.casus_selected[1] = this.casus.length - 1;
        }
        this.casus_selected[0] = $(this.casus[this.casus_selected[1]]);
        return this.casus_selected[0].toggleClass("selected");
      };

      Case_Text.prototype.move_nouns = function(direction) {
        this.noun_selected[0].removeClass("selected");
        console.log(this.noun_selected);
        if (direction === 68) {
          this.noun_selected[1] += 1;
        } else if (direction === 65) {
          this.noun_selected[1] -= 1;
        }
        if (this.noun_selected[1] === this.nouns.length) {
          this.noun_selected[1] = 0;
        }
        if (this.noun_selected[1] === -1) {
          this.noun_selected[1] = this.nouns.length - 1;
        }
        this.noun_selected[0] = $(this.nouns[this.noun_selected[1]]);
        return this.noun_selected[0].toggleClass("selected");
      };

      return Case_Text;

    })();
    Session = (function() {
      function Session() {
        var ky, ky_but, _;
        this.$div_task = $("div#task");
        this.div_texts = $("div#texts");
        this.$button_par = $("button.par_cont");
        for (ky in txt_db) {
          _ = txt_db[ky];
          ky_but = $("<input type='radio' name='text' value='" + ky + "'>" + ky + "<br/>");
          this.div_texts.append(ky_but);
        }
        this.case_text = new Case_Text();
        this.text = "";
        this._control();
        this.div_texts.children().first().click();
        $("button#next").click();
      }

      Session.prototype._control = function() {
        $(this.case_text.casus[0]).addClass("selected");
        this.$button_par.click((function(_this) {
          return function(e) {
            var $but, p;
            console.log("ii");
            _this.$div_task.contents().remove();
            $but = $(e.target);
            _this.text[1] += parseInt($but.val());
            console.log(_this.text, $but.val(), _this.text[0][_this.text[1]]);
            p = $("<p></p>").append(_this.text[0][_this.text[1]]);
            _this.$div_task.append(p);
            _this.case_text.nouns = $(".noun");
            $(_this.case_text.nouns[0]).addClass("selected");
            _this.case_text.noun_selected = [$(_this.case_text.nouns[0]), 0];
            if (_this.text[1] === 0) {
              _this.$button_par.filter("#prev").prop("disabled", true);
            } else {
              _this.$button_par.filter("#prev").prop("disabled", false);
            }
            if (_this.text[1] === _this.text[0].length - 2) {
              return _this.$button_par.filter("#next").prop("disabled", true);
            } else {
              return _this.$button_par.filter("#next").prop("disabled", false);
            }
          };
        })(this));
        $("input[name='text']").change((function(_this) {
          return function(e) {
            var txt;
            txt = $(e.target).val();
            _this.text = [txt_db[txt], -1];
            return $("button#next").click();
          };
        })(this));
        $("#case-controller").click((function(_this) {
          return function() {
            return _this.case_controller();
          };
        })(this));
        $("#reseter").click((function(_this) {
          return function() {
            var score, total_itms;
            score = total_itms = 0;
            $("#score").remove();
            $(".valuation").remove();
            return _this.case_text.nouns.removeData("user").removeClass("false").removeClass("correct");
          };
        })(this));
        return $(document).keyup((function(_this) {
          return function(e) {
            var key_pressed;
            key_pressed = e.which;
            console.log(key_pressed);
            if (key_pressed === 83 || key_pressed === 87) {
              return _this.case_text.move_cases(key_pressed);
            } else if (key_pressed === 65 || key_pressed === 68) {
              return _this.case_text.move_nouns(key_pressed);
            } else if (key_pressed === 32) {
              return _this.case_text.mark_noun();
            }
          };
        })(this));
      };

      Session.prototype.case_controller = function() {
        return this.case_text.nouns.each(function() {
          var $item, right_case, user_case;
          $item = $(this);
          right_case = $item.data("case");
          user_case = $item.data("user");
          if (right_case === user_case) {
            return $item.addClass("correct");
          } else {
            return $item.addClass("false");
          }
        });
      };

      return Session;

    })();
    return session = new Session();
  });

}).call(this);

//# sourceMappingURL=case_text.map
