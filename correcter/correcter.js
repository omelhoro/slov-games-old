// Generated by CoffeeScript 1.7.1
(function() {
  var $,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  $(function() {
    var Session, TaskTrainer, session;
    TaskTrainer = (function() {
      TaskTrainer.control_element = function(event) {
        var $event, is_right;
        is_right = false;
        $event = $(event);
        return $event.siblings("input").each(function() {
          var solution, user_input, w;
          user_input = $(this).val().trim().replace(/\s{2,}/g, ' ', '').replace(" ", "_");
          solution = $(this).data("sol").toString().split(",");
          solution = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = solution.length; _i < _len; _i++) {
              w = solution[_i];
              _results.push(w.trim());
            }
            return _results;
          })();
          if (__indexOf.call(solution, user_input) >= 0) {
            is_right = true;
          } else {
            is_right = false;
          }
          if (is_right === true) {
            return $event.addClass("right").text('âœ“');
          } else {
            return $event.addClass("false").text('x');
          }
        });
      };

      function TaskTrainer(tasks) {
        this.task_hist = [];
        this.ava_tasks = tasks;
        this.giveExample();
        this._showGerman();
      }

      TaskTrainer.prototype._showGerman = function() {
        var hide, show, tskGerman;
        tskGerman = $("#tsk_de");
        show = function() {
          return tskGerman.css("visibility", "visible");
        };
        hide = function() {
          return tskGerman.css("visibility", "hidden");
        };
        return $("#tsk_sl").hover(show, hide);
      };

      TaskTrainer.prototype.giveExample = function() {
        return $("#help").click(function() {
          var $inputBut, inputEl, inputSol;
          $inputBut = $(".corrector").first();
          inputEl = $inputBut.siblings("input");
          inputSol = inputEl.data("sol").replace("_", " ");
          inputEl.val(inputSol);
          return TaskTrainer.control_element($inputBut);
        });
      };

      TaskTrainer.prototype.serve_task = function() {
        var cur_task, header, lstIndex, lstSstr, taskDiv, taskKy, taskTxt;
        $("div#task").remove();
        cur_task = Math.floor(Math.random() * this.ava_tasks.length);
        while (__indexOf.call(this.task_hist, cur_task) >= 0) {
          cur_task = Math.floor(Math.random() * this.ava_tasks.length);
        }
        this.task_hist.push(cur_task);
        console.log(cur_task);
        taskDiv = $("<div id='task'>");
        taskKy = this.ava_tasks[cur_task];
        header = this.ava_tasks[cur_task].join();
        taskTxt = taskDb[taskKy[0]][taskKy[1]];
        if (header.indexOf("|<") !== -1) {
          lstIndex = header.indexOf("|<");
          lstSstr = header.substring(lstIndex + 1);
          header = header.substring(0, lstIndex - 1);
        }
        if (lstSstr != null) {
          taskDiv.append(lstSstr);
        }
        taskDiv.append(taskTxt);
        taskDiv.append("<p><button class='corrector-all'>Check all</button></p>");
        $("#exercises").append(taskDiv);
        $("#task").on("click", ".corrector", function(e) {
          return TaskTrainer.control_element(e.target);
        });
        $("#task").on("click", ".corrector-all", function(e) {
          var $p;
          $p = $(this).parent().prevAll().find("button");
          console.log($p);
          return $p.each(function(i, e) {
            return TaskTrainer.control_element(e);
          });
        });
        this._inputBoxes(taskDiv);
        this._showGerman();
        if (this.task_hist.length === this.ava_tasks.length) {
          return $("button.serve_task").prop("disabled", true);
        }
      };

      TaskTrainer.prototype._inputBoxes = function(taskDiv) {
        var $inputs, array_len, letter_len;
        letter_len = 0;
        array_len = 0;
        $inputs = taskDiv.find("input");
        return $inputs.each(function() {
          var mean_len;
          letter_len += $(this).data("sol").length;
          array_len += 1;
          mean_len = letter_len / array_len;
          return $inputs.prop("size", mean_len);
        });
      };

      return TaskTrainer;

    })();
    Session = (function() {
      function Session() {
        this.ava_tasks = [];
        this._updateNumTasks();
        this.reg_funcs($("button"));
        this.taskTrainer = "";
        $("div#exercises").hide();
        $("div#options").find("input").click();
      }

      Session.prototype.startTrainer = function() {
        $("button.start_trainer").prop("disabled", true);
        $("button.serve_task").prop("disabled", false);
        $("div#options").hide(1000);
        this.taskTrainer = new TaskTrainer(this.ava_tasks);
        this.taskTrainer.serve_task();
        return $("div#exercises").show(1000);
      };

      Session.prototype._updateNumTasks = function() {
        var checkBox, lesMap, n;
        lesMap = {
          beginner: (function() {
            var _i, _results;
            _results = [];
            for (n = _i = 0; _i < 6; n = ++_i) {
              _results.push("les" + n);
            }
            return _results;
          })(),
          adv_beginner: (function() {
            var _i, _results;
            _results = [];
            for (n = _i = 6; _i < 9; n = ++_i) {
              _results.push("les" + n);
            }
            return _results;
          })(),
          advanced: (function() {
            var _i, _results;
            _results = [];
            for (n = _i = 9; _i < 18; n = ++_i) {
              _results.push("les" + n);
            }
            return _results;
          })()
        };
        checkBox = $("div#options").find("input");
        return checkBox.change((function(_this) {
          return function() {
            var k, les, lesLevel, ll, pos, v, _i, _j, _len, _len1, _ref, _ref1;
            _this.ava_tasks = [];
            lesLevel = [];
            pos = [];
            checkBox.each(function() {
              var $checkVal, parId;
              if ($(this).prop("checked")) {
                parId = $(this).parent().prop("id");
                $checkVal = $(this).val();
                if (parId === "lesLevel") {
                  return lesLevel.push(lesMap[$checkVal]);
                } else {
                  return pos.push($checkVal);
                }
              }
            });
            for (_i = 0, _len = lesLevel.length; _i < _len; _i++) {
              ll = lesLevel[_i];
              for (_j = 0, _len1 = ll.length; _j < _len1; _j++) {
                les = ll[_j];
                _ref = taskDb[les];
                for (k in _ref) {
                  v = _ref[k];
                  if ((k != null) && (_ref1 = k.split(",")[0], __indexOf.call(pos, _ref1) >= 0)) {
                    _this.ava_tasks.push([les, k]);
                  }
                }
              }
            }
            return $("span#numTasks").text(_this.ava_tasks.length);
          };
        })(this));
      };

      Session.prototype.reg_funcs = function($buttons) {
        return $buttons.click((function(_this) {
          return function(e) {
            var clss;
            clss = $(e.target).prop("class");
            switch (clss) {
              case "serve_task":
                return _this.taskTrainer.serve_task();
              case "start_trainer":
                if (_this.ava_tasks.length > 0) {
                  return _this.startTrainer();
                } else {
                  return alert("No tasks in the pool!");
                }
            }
          };
        })(this));
      };

      return Session;

    })();
    return session = new Session();
  });

}).call(this);

//# sourceMappingURL=correcter.map
