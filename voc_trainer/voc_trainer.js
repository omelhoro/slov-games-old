// Generated by CoffeeScript 1.7.1
(function() {
  var $,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  $(function() {
    var $choice_par, $input_bx, $input_field, $input_lbl, $lesLength, $status_field, $tabRow, $word, $word_ops, Session, Voc_Trainer, ky, lesKeys, session, _, _i, _len;
    Voc_Trainer = (function() {
      function Voc_Trainer(lessons) {
        var i, lesson, pos, w, word, wr_index, wr_lst, _i, _j, _k, _len, _len1, _ref, _ref1;
        this.word_dict = {};
        this.word_array = [];
        this.freq_pos = {};
        for (_i = 0, _len = lessons.length; _i < _len; _i++) {
          lesson = lessons[_i];
          _ref = voc_db[lesson];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            wr_lst = _ref[_j];
            pos = wr_lst[1];
            this.freq_pos[pos] = this.freq_pos[pos] != null ? this.freq_pos[pos] + 1 : 1;
            this.word_dict[wr_lst[0]] = wr_lst;
            this.word_array.push(wr_lst[0]);
          }
        }
        console.log(this.freq_pos);
        this.mult_ar = (function() {
          var _k, _len2, _ref1, _results;
          _ref1 = this.word_array;
          _results = [];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            w = _ref1[_k];
            _results.push(w);
          }
          return _results;
        }).call(this);
        for (i = _k = 0, _ref1 = this.word_array.length; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
          wr_index = Math.floor(Math.random() * this.word_array.length);
          word = this.word_array[wr_index];
          this.word_array[wr_index] = this.word_array[i];
          this.word_array[i] = word;
        }
        this.status = "input";
      }

      Voc_Trainer.prototype.serve_word = function() {
        var el, i, pos, pos_freq, rand_ar, rand_pos, rand_wrd, trans, word, _i, _len, _results;
        word = this.word_array.pop();
        trans = this.word_dict[word][3];
        pos = this.word_dict[word][1];
        pos_freq = this.freq_pos[pos] < 3;
        $word.text(word).data("sol", trans);
        $input_field.val("");
        rand_ar = [trans];
        console.log(rand_ar, trans, this.word_dict[word]);
        while (rand_ar.length < 3) {
          rand_wrd = this.mult_ar[Math.floor(Math.random() * this.mult_ar.length)];
          rand_pos = this.word_dict[rand_wrd][1];
          rand_wrd = this.word_dict[rand_wrd][3];
          if (__indexOf.call(rand_ar, rand_wrd) < 0 && (rand_pos === pos || pos_freq)) {
            console.log(rand_pos, rand_wrd, pos_freq, this.freq_pos[pos]);
            if (Math.random() > 0.5) {
              rand_ar.push(rand_wrd);
            } else {
              rand_ar.unshift(rand_wrd);
            }
          }
        }
        _results = [];
        for (i = _i = 0, _len = rand_ar.length; _i < _len; i = ++_i) {
          el = rand_ar[i];
          _results.push($("span#op" + (i + 1)).text(el));
        }
        return _results;
      };

      Voc_Trainer.prototype.check_word = function() {
        var $history_div, solution, temp, user_input, val;
        if (this.status === "input") {
          user_input = $input_field.val();
        } else {
          temp = $word_ops.filter(function() {
            return $(this).is(":checked");
          });
          val = temp.val();
          user_input = $("span#" + val).text();
        }
        solution = $word.data("sol");
        console.log(user_input, solution);
        if (user_input === solution) {
          $history_div = $("#history_right");
          $(".word").css({
            backgroundColor: "green"
          });
        } else {
          $(".word").css({
            backgroundColor: "red"
          });
          $history_div = $("#history_false");
        }
        $(".word").animate({
          backgroundColor: "white"
        }, 1500);
        return $history_div.append($("<p></p>").text($(".word").text()));
      };

      return Voc_Trainer;

    })();
    Session = (function() {
      function Session() {
        this.voc_trainer = "";
        this._check_menu();
        this._watch_modus();
        this._watch_start();
      }

      Session.prototype._watch_modus = function() {
        $("div#mult").hide();
        return $("input[name='modus']").change((function(_this) {
          return function(eve) {
            var val;
            console.log(eve, eve.target);
            val = $(eve.target).val();
            switch (val) {
              case "input":
                $("div#mult").hide();
                break;
              case "mult":
                $("div#input").hide();
            }
            $("div#" + val).show();
            if (_this.voc_trainer) {
              return _this.voc_trainer.status = val;
            }
          };
        })(this));
      };

      Session.prototype._control_voc_trainer = function() {
        this.voc_trainer.serve_word();
        $("#next_word").click((function(_this) {
          return function() {
            return _this.voc_trainer.serve_word();
          };
        })(this));
        return $("#check").click((function(_this) {
          return function() {
            return _this.voc_trainer.check_word();
          };
        })(this));
      };

      Session.prototype._watch_start = function() {
        return $("#start").click((function(_this) {
          return function(e) {
            var $lessons, $lessons_checked, lessons;
            $lessons = $("input[name='les']");
            $lessons_checked = $lessons.filter(":checked");
            lessons = [];
            if ($lessons_checked.length > 0) {
              $lessons_checked.each((function(i, elm) {
                var ls;
                console.log("iii");
                ls = $(this);
                return lessons.push(ls.val());
              }));
              $(".voc_trainer_controller").prop("disabled", false);
              _this.voc_trainer = new Voc_Trainer(lessons);
              $("#options").hide("slow");
              return _this._control_voc_trainer();
            } else {
              return alert("No lessons chosen! Try again.");
            }
          };
        })(this));
      };

      Session.prototype._check_menu = function() {
        var $les_box, $sel_lnk;
        $les_box = $("input[value^='les']");
        $sel_lnk = $(".select");
        return $sel_lnk.click(function(e) {
          e.preventDefault();
          switch ($(e.target).prop("id")) {
            case "unselect_all":
              return $les_box.prop("checked", false);
            case "select_all":
              return $les_box.prop("checked", true);
          }
        });
      };

      return Session;

    })();
    console.log(voc_db);
    $input_field = $(".translation");
    $status_field = $("#correction");
    $word = $(".word");
    $word_ops = $("input[name='word_ops']");
    $choice_par = $("p#les_choice").append($("<tr><td>?</td><td>Lektion</td><td># WÃ¶rter</td></tr>"));
    lesKeys = ((function() {
      var _results;
      _results = [];
      for (ky in voc_db) {
        _ = voc_db[ky];
        _results.push(ky);
      }
      return _results;
    })()).sort(function(a, b) {
      a = parseInt(a.match(/\d+/));
      b = parseInt(b.match(/\d+/));
      return a - b;
    });
    for (_i = 0, _len = lesKeys.length; _i < _len; _i++) {
      ky = lesKeys[_i];
      $tabRow = $("<tr>");
      $input_bx = $("<td><input type='checkbox'name='les' value='" + ky + "'/></td>");
      $input_lbl = $("<td>").text("Lektion " + (ky.replace('les', '')));
      $lesLength = $("<td>").text(voc_db[ky].length);
      $tabRow.append($input_bx).append($input_lbl).append($lesLength);
      $choice_par.append($tabRow);
    }
    return session = new Session();
  });

}).call(this);

//# sourceMappingURL=voc_trainer.map
